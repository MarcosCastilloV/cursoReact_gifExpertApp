{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAU,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACpCN,EAAe,MAMnB,SAEE,uBACEO,KAAM,OACNC,MAAST,EACTU,SAnBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACJ,GACTC,EAFa,qDACJ,GADI,cAEiDC,UAAUH,GAF3D,sDAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAOf,EAAKgB,IAAKN,IACtB,4BAAIA,QCCHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGjB,ECNoB,SAAEA,GAE1B,MAAyBd,mBAAS,CAC9BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAnBAC,qBAAU,WAENxB,EAASC,GACRwB,MAAM,SAAAC,GAICH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAOrB,CAACpB,IAGGqB,EDnB4BK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAIxB,OACI,qCACE,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OACCoB,GAAS,mBAAGJ,UAAU,mCAAb,qBACT,qBAAKA,UAAU,YAAf,SAGKH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADGA,EAAIC,aEYjBgB,EA7BI,WAIf,MAAoCzC,mBAAS,CAAC,aAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIA,OACE,qCACI,oBAAI+B,UAAU,GAAd,0BACA,cAAC,EAAD,CAAa/B,cAAiBA,IAC9B,uBAEA,6BAEM2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADJA,YCnB3B6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.31df79e4.chunk.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React, { useState } from 'react'\n\nexport const AddCategory = ({ setCategorias }) => {\n    \n    const [inputValue, setInputValue] = useState (\"\");\n    \n    const handleInputChange = (e)=>{\n        setInputValue (e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if (inputValue.trim().length>2){\n            setCategorias(cats=>[inputValue, ...cats]);\n            setInputValue (\"\");\n        }\n        \n    }\n    \n    return (\n        <form onSubmit={handleSubmit}>\n          \n          <input \n            type =\"text\"  \n            value = {inputValue}\n            onChange = { handleInputChange}\n          />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async(category)=>{\n    const maxIMG = 10;\n    const url=`https://api.giphy.com/v1/gifs/search?limit=${maxIMG}&q=${encodeURI(category)}&api_key=oOshRJG6CqJ9EDinaoqirm6367kGQAIJ`;\n    const resp = await fetch (url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map( img => {\n        return  {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n\n        }\n    })\n    return gifs;\n    \n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn \" >\n            <img src = {url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\n\n\nexport const GifGrid = ({category}) => {\n    \n\n        const {data:images, loading} = useFetchGifs(category);\n        \n\n    \n    return (\n        < >\n          <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>  \n          {loading&&<p className=\"animate__animated animate__flash\">Loading</p>}    \n          {<div className=\"card-grid\">\n          \n              {\n                images.map( img => (\n                  <GifGridItem \n                    key = { img.id }\n                    { ...img }\n                  />\n              ))}\n\n          </div>}\n        </ >\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = ( category ) => {\n        \n    const [state, setState] =useState({\n        data: [], \n        loading: true\n    });\n    useEffect(()=>{\n      \n        getGifs( category )\n        .then (imgs =>{\n            \n            \n                \n                setState({\n                    data: imgs,\n                    loading:false\n                });\n\n           \n            \n        })\n\n    }, [category]);\n   \n\n    return state;\n\n}\n","import {React, useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n\n\nconst GifExpertApp=()=>{\n  \n    \n\n    const [categorias, setCategorias] = useState(['Universe'])\n    \n    \n\n    return (\n      <>\n          <h2 className=\"\">GifExpertApp</h2>\n          <AddCategory setCategorias = {setCategorias}/>\n          <hr />\n          \n          <ol>\n              {\n                categorias.map( category => (\n                    <GifGrid \n                    key = {category}  \n                    category={ category } \n                    />\n                ))\n              }\n              \n          </ol>\n\n      </>\n  )\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}